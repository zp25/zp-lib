{"version":3,"file":"index.esm.js","sources":["../src/api.js","../src/base64.js","../src/bindCustomEvent.js","../src/createAction.js","../src/createReducer.js","../src/dispatch.js","../src/escapeHTML.js","../src/machine.js","../src/searchParams.js","../src/storage/base.js","../src/storage/index.js","../src/subject.js","../src/templater.js","../index.js","../src/storage/proxy.js"],"sourcesContent":["/**\n * @module api\n * @description API Abstraction，请求数据仅支持json和form-data，响应数据仅支持json\n */\n\nconst MIME_JSON = 'application/json';\n\n/**\n * res.ok非true\n * @param {string} message\n * @ignore\n */\nfunction ResponseNotOkError(status, message) {\n  this.code = status;\n  this.name = 'ResponseNotOkError';\n  this.message = message || 'Response not Ok';\n}\n\nResponseNotOkError.prototype = Object.create(Error.prototype);\nResponseNotOkError.prototype.constructor = ResponseNotOkError;\n\n/**\n * res.body数据格式不规范错误\n * @param {string} message\n * @ignore\n */\nfunction ResponseNotJSONError(message) {\n  this.name = 'ResponseNotJSONError';\n  this.message = message || 'Response not JSON Error';\n}\n\nResponseNotJSONError.prototype = Object.create(Error.prototype);\nResponseNotJSONError.prototype.constructor = ResponseNotJSONError;\n\n/**\n * 错误处理，例如404\n * @param {Response} res - 服务器响应\n * @return {(Response|Promise)}\n * @private\n */\nconst handleError = (res) => {\n  const {\n    ok,\n    status,\n    statusText,\n  } = res;\n\n  if (ok) {\n    return res;\n  }\n\n  const err = new ResponseNotOkError(status, statusText);\n\n  return Promise.reject(err);\n};\n\n/**\n * 数据类型过滤，仅接收JSON\n * @param {Response} res - 服务器响应\n * @return {Promise}\n * @private\n */\nconst handleContent = (res) => {\n  const contentType = res.headers.get('content-type');\n  const isJson = new RegExp(MIME_JSON, 'i');\n\n  if (isJson.test(contentType)) {\n    return res.json();\n  }\n\n  const err = new ResponseNotJSONError();\n\n  return Promise.reject(err);\n};\n\n/**\n * fetch统一逻辑\n * @description 处理非网络错误、要求res必须是application/json\n * @param {(Request|string)} input - 请求地址\n * @param {Object} init - fetch配置\n * @return {Promise}\n * @private\n */\nconst fetchProcess = (input, init) => (\n  fetch(input, init)\n    .then(handleError)\n    .then(handleContent)\n);\n\n/**\n * 整理请求实体\n * @desc 主要限制请求实体类型，仅允许发送JSON或FormData；headers中content-type无需严格限制\n * @param {Object} init\n * @param {Object} [init.headers]\n * @param {(FormData|JSON)} [init.body]\n * @return {Object}\n * @private\n */\nconst reqHeadersAndBody = (init = {}) => {\n  const {\n    headers = {},\n    body,\n  } = init;\n\n  // edge传入undefined报参数无效错误, headers改为空对象\n  const h = new Headers(headers);\n  h.set('accept', MIME_JSON);\n\n  if (typeof body === 'undefined') {\n    return {\n      headers: h,\n    };\n  }\n\n  if (body instanceof FormData) {\n    return {\n      headers: h,\n      body,\n    };\n  }\n\n  h.set('content-type', MIME_JSON);\n\n  return {\n    headers: h,\n    body: JSON.stringify(body),\n  };\n};\n\n/**\n * 增\n * @param {string} input - 请求URL\n * @param {Object} init - 额外参数\n * @param {Object} [init.headers]\n * @param {(FormData|JSON)} [init.body]\n * @param {string} [init.mode]\n * @return {Promise}\n */\nconst post = (input, init = {}) => {\n  const {\n    headers,\n    body = '',\n    mode = 'no-cors',\n    ...rest\n  } = init;\n\n  return fetchProcess(input, {\n    ...rest,\n    method: 'POST',\n    ...reqHeadersAndBody({ headers, body }),\n    mode,\n  });\n};\n\n/**\n * 查\n * @param {string} input - 请求URL\n * @param {Object} init - 额外参数\n * @param {Object} [init.headers]\n * @param {string} [init.mode]\n * @return {Promise}\n */\nconst get = (input, init = {}) => {\n  const {\n    headers,\n    mode = 'no-cors',\n    ...rest\n  } = init;\n\n  return fetchProcess(input, {\n    ...rest,\n    method: 'GET',\n    ...reqHeadersAndBody({ headers }),\n    mode,\n  });\n};\n\n/**\n * 改\n * @param {string} input - 请求URL\n * @param {Object} init - 额外参数\n * @param {Object} [init.headers]\n * @param {(FormData|JSON)} [init.body]\n * @param {string} [init.mode]\n * @return {Promise}\n */\nconst put = (input, init = {}) => {\n  const {\n    headers,\n    body = '',\n    mode = 'no-cors',\n    ...rest\n  } = init;\n\n  return fetchProcess(input, {\n    ...rest,\n    method: 'PUT',\n    ...reqHeadersAndBody({ headers, body }),\n    mode,\n  });\n};\n\n/**\n * 删\n * @function delete\n * @param {string} input - 请求URL\n * @param {Object} init - 额外参数\n * @param {Object} [init.headers]\n * @param {string} [init.mode]\n * @return {Promise}\n */\nconst del = (input, init = {}) => {\n  const {\n    headers,\n    mode = 'no-cors',\n    ...rest\n  } = init;\n\n  return fetchProcess(input, {\n    ...rest,\n    method: 'DELETE',\n    ...reqHeadersAndBody({ headers }),\n    mode,\n  });\n};\n\n/**\n * api\n * @type {Object}\n * @ignore\n */\nconst api = {\n  post,\n  get,\n  put,\n  delete: del,\n};\n\nexport default api;\nexport {\n  ResponseNotOkError,\n  ResponseNotJSONError,\n  handleError,\n  handleContent,\n  reqHeadersAndBody,\n};\n","/**\n * base64编码\n * @param  {string} str 需编码字符串\n * @return {string}\n */\nconst encodeBase64 = str => (\n  window.btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (match, p1) => (\n    String.fromCharCode(`0x${p1}`)\n  )))\n);\n\n/**\n * base64解码\n * @param  {string} str 需解码字符串，原字符串需utf-8编码\n * @return {string}\n */\nconst decodeBase64 = str => (\n  decodeURIComponent(Array.from(window.atob(str)).map(c => (\n    `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`\n  )).join(''))\n);\n\nexport {\n  encodeBase64,\n  decodeBase64,\n};\n","/**\n * @module bindCustomEvent\n * @description 绑定自定义事件\n * @param {Object.<string, function>} obj - 自定义事件和处理函数映射表\n * @example  <caption>传入自定义事件名和处理函数的映射表</caption>\n * function customEventTrigger(type, data) {\n *   const event = new CustomEvent(type, {\n *     detail: data || { name: type },\n *   });\n *\n *   window.dispatchEvent(event);\n * }\n *\n * function eventATrigger(data) {\n *   customEventTrigger('eventA', { data });\n * }\n * @example\n * const customEvents = {\n *   eventA: (e) => {\n *     const { data } = e.detail;\n *\n *     console.log(data);\n *   },\n * };\n *\n * bindCustomEvent(customEvents);\n *\n * eventATrigger({ data: true });\n */\n\nexport default (obj) => {\n  const eventMap = new Map(Object.entries(obj));\n\n  eventMap.forEach((handler, event) => {\n    document.addEventListener(event, handler, false);\n  });\n};\n","/**\n * FSA Factory\n * @see {@link https://github.com/acdlite/redux-actions/blob/master/src/createAction.js}\n * @param {string} type - Action type\n * @param {function} [payloadCreator] - payload创建函数\n * @param {function} [metaCreator] - meta数据创建函数\n * @return {function} Action创建函数\n */\nexport default (type, payloadCreator, metaCreator) => {\n  const finalPayloadCreator = typeof payloadCreator === 'function'\n    ? payloadCreator\n    : t => t;\n\n  const hasMeta = typeof metaCreator === 'function';\n  const typeString = type.toString();\n\n  const actionCreator = (...args) => {\n    const payload = finalPayloadCreator(...args);\n    const action = {\n      type,\n    };\n\n    if (payload instanceof Error) {\n      action.error = true;\n    }\n\n    if (payload !== undefined) {\n      action.payload = payload;\n    }\n\n    if (hasMeta) {\n      action.meta = metaCreator(...args);\n    }\n\n    return action;\n  };\n\n  actionCreator.toString = () => typeString;\n\n  return actionCreator;\n};\n","/**\n * Reducer Factory\n * @param {*} initState - state tree特定部分的默认值\n * @param {Object} handlers - 处理函数映射表\n * @return {function} Reducer\n */\nexport default (initState, handlers) => (state = initState, action) => {\n  const { type } = action;\n\n  if ({}.hasOwnProperty.call(handlers, type)) {\n    return handlers[type](state, action);\n  }\n\n  return state;\n};\n","/**\n * @module dispatch\n * @description 事件分发\n * @param {Object.<string, function>} handlers - 事件处理函数组成的对象\n * @return {function} 分发函数\n * @example  <caption>事件代理利用e.target.dataset.trigger查找handlers中匹配处理函数</caption>\n * <ul class=\"anchor-list\">\n *   <li><a href=\"#linkA\" data-trigger=\"link\" data-value=\"A\">Link A</a></li>\n *   <li><a href=\"#linkB\" data-trigger=\"link\" data-value=\"B\">Link B</a></li>\n *   <li><a href=\"#linkC\" data-trigger=\"link\" data-value=\"C\">Link C</a></li>\n * </ul>\n * @example\n * const createClickHandlers = () => {\n *   const link = (e) => {\n *     const { value } = e.target.dataset;\n *\n *     alert(value);\n *   };\n *\n *   return {\n *     link,\n *   };\n * };\n *\n * const clickHandlers = createClickHandlers();\n * document.body.addEventListener('click', dispatch(clickHandlers), false);\n */\n\nexport default handlers => (e) => {\n  const { trigger } = e.target.dataset;\n\n  if (trigger && {}.hasOwnProperty.call(handlers, trigger)) {\n    handlers[trigger](e);\n  }\n};\n","/**\n * @module escapeHTML\n * @description 转义字符串\n * @see {@link https://stackoverflow.com/questions/1787322/htmlspecialchars-equivalent-in-javascript/4835406#4835406}\n * @param {string} unsafe - 需转义字符串\n * @return {string} 转义后字符串\n */\n\nconst escapeHTML = (unsafe) => {\n  const map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;',\n  };\n\n  return unsafe.replace(/[&<>\"']/g, m => map[m]);\n};\n\nexport default escapeHTML;\n","/**\n * @module machine\n * @description 有限状态机\n * @param {Object.<string, string>} dict - 状态查询字典\n * @return {function}\n * @example\n * const dict = {\n *   start: {\n *     MOVE: 'move',\n *     END: 'end',\n *   },\n *   move: {\n *     MOVE: 'move',\n *     END: 'end',\n *   },\n *   end: {\n *     START: 'start',\n *   },\n * };\n *\n * const transition = machine(dict);\n *\n * // 根据当前状态start和输入END确定输出状态\n * const nextState = transition('start')('END');\n */\n\nexport default dict => currentState => (action) => {\n  const transition = dict[currentState];\n\n  if (transition && {}.hasOwnProperty.call(transition, action)) {\n    return transition[action];\n  }\n\n  return false;\n};\n","/**\n * @module searchParams\n * @description 返回object，存储location.search中的key-value对\n * @param {string} search - location.search\n * @return {Object}\n * @example\n * const params = searchParams(location.search);\n * const { foo, bar, baz } = params;\n */\n\nexport default (search) => {\n  if (typeof URLSearchParams === 'function') {\n    const searchParams = new URLSearchParams(search);\n\n    // return [...searchParams].reduce((prev, [key, val]) => ({\n    //   ...prev,\n    //   [key]: val || true,\n    // }), {});\n\n    return Object.fromEntries(\n      [...searchParams].map(([key, val]) => [key, val || true]),\n    );\n  }\n\n  const regex = /([^?&=]+)=?([^&]*)/g;\n  let result = {};\n  let a = '';\n\n  while ((a = regex.exec(search))) {\n    result = {\n      ...result,\n      [a[1]]: a[2] ? decodeURIComponent(a[2]) : true,\n    };\n  }\n\n  return result;\n};\n","/**\n * 读取localStorage/sessionStorage\n * @param {localStorage|sessionStorage} store - 存储方式\n * @param {string} key\n * @return {(Object|string|null)} 若没有匹配key，返回null\n * @ignore\n */\nconst read = (store, key) => {\n  const data = store.getItem(key);\n\n  try {\n    return JSON.parse(data);\n  } catch {\n    return data;\n  }\n};\n\n/**\n * 写入localStorage/sessionStorage\n * @param {localStorage|sessionStorage} store - 存储方式\n * @param {*} data - 可序列化数据\n * @ignore\n */\nconst save = (store, key, data) => store.setItem(key, JSON.stringify(data));\n\n/**\n * 自定义错误\n * @param {string} message\n * @ignore\n */\nfunction StorageTypeError(message) {\n  this.name = 'StorageTypeError';\n  this.message = message || 'Storage Type Error';\n}\n\nStorageTypeError.prototype = Object.create(Error.prototype);\nStorageTypeError.prototype.constructor = StorageTypeError;\n\nexport {\n  read,\n  save,\n  StorageTypeError,\n};\n","/**\n * @typedef {Object} storage\n * @property {function} get - 读数据\n * @property {function} set - 写数据\n * @property {function} remove - 删数据\n * @description 不知道怎么写\n */\n\nimport {\n  read,\n  save,\n  StorageTypeError,\n} from './base';\n\n/**\n * @module storage\n * @description 主要为了统一存取格式。如果遇到不统一格式，读取总是返回undefined，写入会强制替换\n * @param {string} item - 标记\n * @param {Object} config - 选项\n * @param {localStorage|sessionStorage} [config.engine=localStorage] - 存储方式\n * @param {boolean} [config.forceUpdate=true] - 默认若格式不统一，会覆盖原先值。设置false不强制覆盖，总是抛出错误\n * @return {storage}\n */\nconst storage = (item, config = {}) => {\n  const {\n    engine = localStorage,\n    forceUpdate = true,\n  } = config;\n\n  /**\n   * 读数据\n   * @description 读取操作不应覆盖非法数据\n   * @param {string} key\n   * @throws {StorageTypeError}\n   */\n  const get = (key) => {\n    const data = read(engine, item);\n\n    if (data === null || typeof data !== 'object') {\n      return undefined;\n    }\n\n    return data[key];\n  };\n\n  /**\n   * 写数据\n   * @param {string} key\n   * @param {*} val - 可序列化数据\n   * @return {undefined}\n   * @throws {StorageTypeError}\n   */\n  const set = (key, val) => {\n    const data = read(engine, item);\n\n    // 无数据(原先数据为null作为无数据处理)\n    if (data === null) {\n      return save(engine, item, { [key]: val });\n    }\n\n    // 非法数据\n    if (typeof data !== 'object') {\n      if (!forceUpdate) {\n        throw new StorageTypeError();\n      }\n\n      return save(engine, item, { [key]: val });\n    }\n\n    return save(engine, item, {\n      ...data,\n      [key]: val,\n    });\n  };\n\n  /**\n   * 删数据\n   * @param {string} key\n   * @return {undefined}\n   * @throws {StorageTypeError}\n   */\n  const del = (key) => {\n    const data = read(engine, item);\n\n    // 无数据\n    if (data === null) {\n      return save(engine, item, {});\n    }\n\n    // 非法数据\n    if (typeof data !== 'object') {\n      if (!forceUpdate) {\n        throw new StorageTypeError();\n      }\n\n      return save(engine, item, {});\n    }\n\n    const rest = Object.entries(data).reduce((prev, [k, v]) => {\n      if (k === key) {\n        return prev;\n      }\n\n      return {\n        ...prev,\n        [k]: v,\n      };\n    }, {});\n\n    return save(engine, item, rest);\n  };\n\n  /**\n   * 查看keys\n   * @description 读取操作不应覆盖非法数据\n   * @return {Array.<string>|null}\n   * @throws {StorageTypeError}\n   */\n  const keys = () => {\n    const data = read(engine, item);\n\n    if (data === null || typeof data !== 'object') {\n      return [];\n    }\n\n    return Object.keys(data);\n  };\n\n  return {\n    get,\n    set,\n    delete: del,\n    keys,\n  };\n};\n\nexport default storage;\n","/* eslint no-underscore-dangle:0, max-classes-per-file:0 */\n\n/**\n * @typedef {Object} Observer\n * @property {Function} update - 更新状态\n */\n\n/**\n * 不规范observer错误\n * @param {string} message\n * @ignore\n */\nfunction InvalidObserverError(message) {\n  this.name = 'InvalidObserverError';\n  this.message = message || 'Invalid Observer Error';\n}\n\nInvalidObserverError.prototype = Object.create(Error.prototype);\nInvalidObserverError.prototype.constructor = InvalidObserverError;\n\n/**\n * @class\n * @description 目标\n */\nclass Subject {\n  /**\n   * 判断是否为合规observer\n   * @param {*} observer - 需检查内容\n   * @return {boolean}\n   * @static\n   */\n  static isValidObserver(observer) {\n    return !!(\n      observer\n      && typeof observer === 'object'\n      // && ({}).hasOwnProperty.call(observer, 'update')\n      && typeof observer.update === 'function'\n    );\n  }\n\n  /**\n   * 观察者列表\n   * @type {Array.<Observer>}\n   * @protected\n   */\n  _observers = [];\n\n  /**\n   * 目标状态\n   * @type {Object}\n   * @protected\n   */\n  _state = {};\n\n  /**\n   * 绑定观察者\n   * @param {Observer|Observer[]} observers - 观察者对象\n   * @return {number} 完成后observers个数\n   * @throws {InvalidObserverError} 存在不合规observer\n   * @public\n   */\n  attach(observers) {\n    const list = Array.isArray(observers) ? observers : [observers];\n\n    list.forEach((o) => {\n      if (!this.constructor.isValidObserver(o)) {\n        throw new InvalidObserverError();\n      }\n\n      if (!this._observers.includes(o)) {\n        this._observers.push(o);\n      }\n    });\n\n    return this._observers.length;\n  }\n\n  /**\n   * 解绑观察者\n   * @param {Observer} observers - 观察者对象\n   * @return {number} 剩余observers个数\n   * @public\n   */\n  detach(observers) {\n    const list = Array.isArray(observers) ? observers : [observers];\n\n    this._observers = this._observers.filter(o => !list.includes(o));\n\n    return this._observers.length;\n  }\n\n  /**\n   * 获取观察者列表\n   * @type {Array.<Observer>}\n   * @desc 避免外部直接修改observers而添加getter，类内部总是使用this._observers\n   * @public\n   */\n  get observers() {\n    return this._observers;\n  }\n\n  /**\n   * 获取状态\n   * @type {Object}\n   * @public\n   */\n  get state() {\n    return { ...this._state };\n  }\n\n  /**\n   * 初始化状态\n   */\n  set state(obj) {\n    if (typeof obj !== 'object' || !obj) {\n      throw new TypeError('not an Object');\n    }\n\n    this._state = { ...obj };\n  }\n\n  /**\n   * 更新状态\n   * @param {Object} state - 额外数据，用于合并到state\n   * @public\n   */\n  setState(state) {\n    const prevState = this.state;\n    this._state = {\n      ...prevState,\n      ...state,\n    };\n\n    this.notify(prevState);\n  }\n\n  /**\n   * 通知观察者状态变化\n   * @param {Object} prevState - 原状态\n   * @protected\n   */\n  notify(prevState) {\n    this._observers.forEach((o) => {\n      if (this.constructor.isValidObserver(o)) {\n        o.update(this.state, prevState);\n      }\n    });\n  }\n}\n\n/**\n * @class\n * @description 观察者, 可以绑定到多个目标\n */\nclass Observer {\n  constructor(subject) {\n    if (subject instanceof Subject) {\n      subject.attach(this);\n    }\n  }\n\n  /**\n   * 必有方法\n   * @param {Subject} - 目标实例\n   * @return {Object}\n   */\n  update(subject) { // eslint-disable-line class-methods-use-this\n    if (subject instanceof Subject) {\n      return subject.state;\n    }\n\n    return undefined;\n  }\n}\n\nexport default Subject;\nexport {\n  InvalidObserverError,\n  Observer,\n};\n","/**\n * 转换逻辑\n * @ignore\n */\nconst core = data => (key) => {\n  let replace = '';\n\n  if (typeof key === 'function') {\n    replace = key(data[key.displayName]);\n  } else if (typeof key === 'object') {\n    replace = key.content(data[key.name]);\n  } else {\n    replace = data[key] === undefined ? key : data[key];\n  }\n\n  return replace;\n};\n\n/**\n * @module templater\n * @description 模版引擎\n * @example <caption>通过string查找</caption>\n * const template = templater`\n *   <div class=\"content\">\n *     <p>${'content'}</p>\n *     <p>${'nil'}</p>\n *   </div>\n * `;\n *\n * const context = { content: 'Hello World' };\n * const result = template(context);\n *\n * document.querySelector('#target').insertAdjacentHTML('beforeend', result);\n *\n * @example <caption>通过function查找，注意设置函数的displayName属性为data对应的key</caption>\n * const content = data => (\n *   Array.isArray(data) ?\n *     data.reduce((prev, d) => `${prev}<p>${d}</p>`, '') :\n *     `<p>${data}</p>`\n * );\n * content.displayName = 'content';\n *\n * const template = templater`\n *   <div class=\"content\">${content}</div>\n * `;\n *\n * const context = { content: ['foo', 'bar', 'baz'] };\n * const result = template(context);\n *\n * document.querySelector('#target').insertAdjacentHTML('beforeend', result);\n *\n * @example <caption>通过object查找，若function的displayName和data的key不匹配，设置{ name, content }映射关系</caption>\n * const content = () => ({\n *   name: 'key',\n *   content: data => data,\n * });\n *\n * const template = templater`\n *   <p class=\"content\">${content()}</p>\n * `;\n *\n * const context = { key: 'foo' };\n * const result = template(context);\n *\n * document.querySelector('#target').insertAdjacentHTML('beforeend', result);\n *\n * @example <caption>通过object查找的另一种用法</caption>\n * const content = (type) => {\n *   const foo = {\n *     name: 'keyA',\n *     content: data => `content A: ${data}`,\n *   };\n *\n *   const bar = {\n *     name: 'keyB',\n *     content: data => `content B: ${data}`,\n *   };\n *\n *   return type === 1 ? foo : bar;\n * };\n *\n * const template = templater`\n *   <div class=\"content\">\n *     <p>${content(1)}</p>\n *     <p>${content()}</p>\n *   </div>\n * `;\n *\n * const context = { keyA: 'foo', keyB: 'bar' };\n * const result = template(context);\n *\n * document.querySelector('#target').insertAdjacentHTML('beforeend', result);\n */\nconst templater = (strs, ...keys) => (data) => {\n  const arr = Array.isArray(data) ? data : [data];\n\n  const result = arr.map((d) => {\n    const replace = core(d);\n\n    return keys.reduce((prev, key, i) => (\n      prev + replace(key) + strs[i + 1]\n    ), strs[0]);\n  });\n\n  return result.join('');\n};\n\n/**\n * @module templaterAsync\n * @description 异步模版引擎，没使用async/await避免regenerator\n * @example\n * const content = data => Promise.resolve(`<p>${data}</p>`);\n * content.displayName = 'content';\n *\n * const template = templaterAsync`\n *   <div class=\"content\">${content}</div>\n * `;\n *\n * const context = { content: 'Hello World!' };\n * const result = await template(context);\n *\n * document.querySelector('#target').insertAdjacentHTML('beforeend', result);\n */\nconst templaterAsync = (strs, ...keys) => (data) => {\n  const arr = Array.isArray(data) ? data : [data];\n\n  return Promise.all(arr.map((d) => {\n    const replace = core(d);\n\n    return Promise.all(keys.map(replace)).then(resolved => (\n      resolved.reduce((prev, r, i) => prev + r + strs[i + 1], strs[0])\n    ));\n  })).then(result => result.join(''));\n};\n// const templaterAsync = (strs, ...keys) => async (data) => {\n//   const arr = Array.isArray(data) ? data : [data];\n\n//   const result = await Promise.all(arr.map(async (d) => {\n//     const resolved = await Promise.all(keys.map(core(d)));\n\n//     return resolved.reduce((prev, r, i) => prev + r + strs[i + 1], strs[0]);\n//   }));\n\n//   return result.join('');\n// };\n\nexport {\n  templater,\n  templaterAsync,\n};\n","import api from './src/api';\nimport {\n  encodeBase64,\n  decodeBase64,\n} from './src/base64';\nimport bindCustomEvent from './src/bindCustomEvent';\nimport createAction from './src/createAction';\nimport createReducer from './src/createReducer';\nimport dispatch from './src/dispatch';\nimport escapeHTML from './src/escapeHTML';\nimport machine from './src/machine';\nimport searchParams from './src/searchParams';\nimport storage from './src/storage';\nimport storageProxy from './src/storage/proxy';\nimport Subject, { Observer } from './src/subject';\nimport {\n  templater,\n  templaterAsync,\n} from './src/templater';\n\nstorage.proxy = storageProxy;\n\nexport {\n  api,\n  encodeBase64,\n  decodeBase64,\n  bindCustomEvent,\n  createAction,\n  createReducer,\n  dispatch,\n  escapeHTML,\n  machine,\n  searchParams,\n  storage,\n  Subject,\n  Observer,\n  templater,\n  templaterAsync,\n};\n","import {\n  read,\n  save,\n  StorageTypeError,\n} from './base';\n\n/**\n * @module storage.proxy\n * @description 更接近obj操作\n * @see {@link https://davidwalsh.name/javascript-proxy-with-storage}\n * @param {string} item - 标记\n * @param {Object} config - 选项\n * @param {localStorage|sessionStorage} [config.engine=localStorage] - 存储方式\n * @param {boolean} [config.forceUpdate=true] - 默认若格式不统一，会覆盖原先值。设置false不强制覆盖，总是抛出错误\n * @return {Proxy}\n */\nconst storage = (item, config = {}) => {\n  const {\n    engine = localStorage,\n    forceUpdate = true,\n  } = config;\n\n  return new Proxy({}, {\n    /**\n     * 读数据\n     */\n    get(target, name) {\n      const data = read(engine, item);\n\n      if (data === null || typeof data !== 'object') {\n        return undefined;\n      }\n\n      return data[name];\n    },\n\n    /**\n     * 写数据\n     */\n    set(target, name, value) {\n      const data = read(engine, item);\n\n      // 无数据(原先数据为null作为无数据处理)\n      if (data === null) {\n        save(engine, item, { [name]: value });\n        return true;\n      }\n\n      // 非法数据\n      if (typeof data !== 'object') {\n        if (!forceUpdate) {\n          throw new StorageTypeError();\n        }\n\n        save(engine, item, { [name]: value });\n        return true;\n      }\n\n      save(engine, item, {\n        ...data,\n        [name]: value,\n      });\n      return true;\n    },\n\n    /**\n     * 删数据\n     */\n    deleteProperty(target, name) {\n      const data = read(engine, item);\n\n      // 无数据\n      if (data === null) {\n        save(engine, item, {});\n        return true;\n      }\n\n      // 非法数据\n      if (typeof data !== 'object') {\n        if (!forceUpdate) {\n          throw new StorageTypeError();\n        }\n\n        save(engine, item, {});\n        return true;\n      }\n\n      const rest = Object.entries(data).reduce((prev, [key, val]) => {\n        if (key === name) {\n          return prev;\n        }\n\n        return {\n          ...prev,\n          [key]: val,\n        };\n      }, {});\n\n      save(engine, item, rest);\n      return true;\n    },\n\n    /**\n     * 查看keys\n     */\n    ownKeys() {\n      const data = read(engine, item);\n\n      if (data === null || typeof data !== 'object') {\n        return [];\n      }\n\n      return Object.keys(data);\n    },\n\n    /**\n     * 修改属性descriptor\n     * @description Object.keys仅返回自有可枚举属性,Object.getOwnPropertyNames返回包括不可枚举属性\n     * @see {@link https://stackoverflow.com/questions/40352613/why-does-object-keys-and-object-getownpropertynames-produce-different-output}\n     * @return {Object|undefined}\n     */\n    getOwnPropertyDescriptor(target, name) {\n      const data = read(engine, item);\n\n      if (\n        data === null\n        || typeof data !== 'object'\n        || !{}.hasOwnProperty.call(data, name)\n      ) {\n        return undefined;\n      }\n\n      return {\n        configurable: true,\n        enumerable: true,\n      };\n    },\n\n    /**\n     * in操作符\n     */\n    has(target, name) {\n      const data = read(engine, item);\n\n      if (\n        data === null\n        || typeof data !== 'object'\n        || !{}.hasOwnProperty.call(data, name)\n      ) {\n        return false;\n      }\n\n      return true;\n    },\n  });\n};\n\nexport default storage;\n"],"names":["MIME_JSON","ResponseNotOkError","status","message","code","name","ResponseNotJSONError","prototype","Object","create","Error","constructor","handleError","res","ok","statusText","err","Promise","reject","handleContent","contentType","headers","get","RegExp","test","json","fetchProcess","input","init","fetch","then","reqHeadersAndBody","body","h","Headers","set","FormData","JSON","stringify","api","post","mode","rest","method","put","delete","encodeBase64","str","window","btoa","encodeURIComponent","replace","match","p1","String","fromCharCode","decodeBase64","decodeURIComponent","Array","from","atob","map","c","charCodeAt","toString","slice","join","obj","Map","entries","forEach","handler","event","document","addEventListener","type","payloadCreator","metaCreator","finalPayloadCreator","t","hasMeta","typeString","actionCreator","payload","action","error","undefined","meta","initState","handlers","state","hasOwnProperty","call","e","trigger","target","dataset","escapeHTML","unsafe","m","dict","currentState","transition","search","URLSearchParams","searchParams","fromEntries","_toConsumableArray","regex","result","a","exec","read","store","key","data","getItem","parse","save","setItem","StorageTypeError","storage","item","config","engine","localStorage","forceUpdate","_typeof","val","del","reduce","prev","k","v","keys","InvalidObserverError","Subject","observers","isArray","o","_this","isValidObserver","_observers","includes","push","this","length","list","filter","prevState","_state","notify","_this2","update","TypeError","observer","Observer","subject","attach","core","displayName","content","templater","strs","d","i","templaterAsync","arr","all","resolved","r","proxy","Proxy","value","deleteProperty","ownKeys","getOwnPropertyDescriptor","configurable","enumerable","has"],"mappings":"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"}